#!/usr/bin/env python

import math
import numpy as np
import rospy
from pandas import DataFrame
# from mavros_msgs.msg import State
from sensor_msgs.msg import Imu, NavSatFix
from geometry_msgs.msg import PoseWithCovarianceStamped
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Odometry
from darknet_ros_msgs.msg import BoundingBoxes
from mavros_msgs.msg import PositionTarget
from mavros_msgs.srv import ParamSet
from mavros_msgs.msg import State
from mavros_msgs.srv import CommandBool, CommandBoolRequest, SetMode, SetModeRequest
from math import *
from datetime import datetime
import time
from AOA_v1 import AOA
from dop import cost_function
from LeastQ_v1 import least_square
import heapq
from offb_pos import offb_pos
from offb_land import offb_land

AOA = AOA()
cal_dop = cost_function()
LeastQ = least_square()
current_state = State()
offb_pos = offb_pos()
offb_land = offb_land()

enu_pos = []
pos_command = []
P_img = []
azimuth = []
ob_point = []
roi_num = []
est_position = []
lamda = []

class aoa_info(object):
    def __init__(self):
        self.imu_msg = Imu()
        self.gps_msg = Odometry()
        self.roi_msg = BoundingBoxes()

        self.gps_pose = [0,0,0]
        self.ned_pose = [0,0,0]
        self.roi_four = [0, 0, 0, 0]
        self.ob_pose = [0,0,0]
        self.imu_x = 0
        self.roll, self.pitch, self.yaw = 0,0,0
        self.quat = [0,0,0,0]
        self.u, self.v = 0, 0
        self.P_img_x, self.P_img_y, self.P_img_z = 0, 0, 0
        self.angle_a_w = 0
        self.angle_e_w = 0
        self.angle_a = [0, 0]
        self.angle_e = [0, 0]
        self.est_position = []
        self.est_x, self.est_y, self.est_z = 0, 0, 0
        self.lamda = 0

        self.next_pos = [0, 0, 0]
        self.heading = 0
        self.ob_point = [0, 0, 0]

        self.waypoint_1 = 0
        self.waypoint_2 = 0
        self.waypoint_3 = 0

        self.heading_1, self.heading_2, self.heading_3 = 0, 0, 0

        #self.Target_position_world_x, self.Target_position_world_y, self.Target_position_world_z = 0, 0, 0
        self.Target_position_vector_x, self.Target_position_vector_y, self.Target_position_vector_z = 0, 0, 0

        rospy.Subscriber("/iris_fpv_cam_0/mavros/imu/data", Imu, self.imu_callback)
        #drone position
        rospy.Subscriber("/iris_fpv_cam_0/mavros/global_position/local", Odometry, self.gps_callback)    
        #target position (image)
        rospy.Subscriber("/darknet_ros/bounding_boxes", BoundingBoxes, self.roi_callback)

        #self.setpoint = PositionTarget()
        #self.setpoint_pub = rospy.Publisher("/iris_fpv_cam_0/mavros/setpoint_raw/local", PositionTarget, queue_size=1)

        self.position_min = self.ned_pose


    def gps_callback(self, msg):
        self.gps_msg = msg
        self.gps_pose[0] = msg.pose.pose.position.x
        self.gps_pose[1] = msg.pose.pose.position.y
        self.gps_pose[2] = msg.pose.pose.position.z

        self.ned_pose[0], self.ned_pose[1], self.ned_pose[2] = self.ENU_to_NED(self.gps_pose[0], self.gps_pose[1], self.gps_pose[2])
        #print(self.ned_pose[0], self.ned_pose[1], self.ned_pose[2])


    def imu_callback(self, msg):
        self.imu_msg = msg
        self.quat[0] = msg.orientation.w
        self.quat[1] = msg.orientation.x
        self.quat[2] = msg.orientation.y
        self.quat[3] = msg.orientation.z


        self.roll, self.pitch, self.yaw = self.euler_from_quaternion(msg.orientation.x, msg.orientation.y, msg.orientation.z, msg.orientation.w)

    def ENU_to_NED(self, x, y, z):
  
        R = [[0, 1, 0],[1, 0, 0],[0, 0, -1]]
        q = [x, y, z]
        ned = np.matmul(R,q)
        a = ned[0]
        b = ned[1]
        c = ned[2]
      
        return a, b, c

    def NED_to_ENU(self, x, y, z):
  
        R = [[0, 1, 0],[1, 0, 0],[0, 0, -1]]
        q = [x, y, z]
        ned = np.matmul(R,q)
        a = ned[0]
        b = ned[1]
        c = ned[2]
      
        return a, b, c

    def roi_callback(self, msg):
        
        self.roi_msg = msg

        for box in msg.bounding_boxes:


            if [box.xmin, box.xmax, box.ymin, box.ymax]!=[self.roi_four[0], self.roi_four[1], self.roi_four[2], self.roi_four[3]] and [self.roll, self.pitch]<=[0.5, 0.5]:

                print("----------Detection-----------")
                print("------------------------------")
                rospy.loginfo("Xmin: {}, Xmax: {} Ymin: {}, Ymax: {}".format(box.xmin, box.xmax, box.ymin, box.ymax))

                self.roi_four[0] = box.xmin
                self.roi_four[1] = box.xmax
                self.roi_four[2] = box.ymin
                self.roi_four[3] = box.ymax

                #print("BoundingBoxes = ")
                #print(self.roi_four)

                self.u = (self.roi_four[0] + self.roi_four[1])/2
                self.v = (self.roi_four[2] + self.roi_four[3])/2

                #position_vector
                size_u = 320
                size_v = 240
                u_0 = size_u/2
                v_0 = size_v/2
                # focal length
                f = 277.191356
                self.P_img_x = (v_0 - self.v)*1
                self.P_img_y = (self.u - u_0)*1
                self.P_img_z = f

                self.ob_point[0] = self.ned_pose[0]
                self.ob_point[1] = self.ned_pose[1]
                self.ob_point[2] = self.ned_pose[2]

                ###################### AOA ######################
                self.angle_a_w, self.angle_e_w, self.angle_a, self.angle_e, self.Target_position_world_x, self.Target_position_world_y, self.Target_position_world_z, self.Target_position_vector_x, self.Target_position_vector_y, self.Target_position_vector_z, self.lamda = AOA.AOA_v1(self.ned_pose[0], self.ned_pose[1], self.ned_pose[2], self.roll, self.pitch, self.yaw, self.P_img_x, self.P_img_y, self.P_img_z)
        
                #print("---------------AOA----------------")
                #print(self.angle_a_w, self.angle_e_w)
                #print(self.angle_a, self.angle_e)
                print('Target_position_world (ned) = ')
                print(self.Target_position_world_x, self.Target_position_world_y, self.Target_position_world_z)
                #print(self.Target_position_vector_x, self.Target_position_vector_y, self.Target_position_vector_z)
                #print("-----------------------------------")
                
                est_position.append([self.Target_position_world_x, self.Target_position_world_y, self.Target_position_world_z])
                
                ############## collect data for observation point #####################
                azimuth.append(self.angle_a_w)
                ob_point.append([self.ob_point[0], self.ob_point[1], self.ob_point[2]])
                #print('azimuth = ')
                #print(azimuth)

            else:
                pass

        ###################### path planning ######################
        value = []

        next_position_list =  cal_dop.next_position(self.angle_a_w, est_position[0])
        #print("next_position_list : ")
        #print(next_position_list)

        for i in range (20):
            a = [next_position_list[i][0], next_position_list[i][1], next_position_list[i][2]]
            #print("next_position = ")
            #print(a)
            n = [self.gps_pose[0], self.gps_pose[1], -self.gps_pose[2]]
            GDOP = cal_dop.calculate_dop(n, a, est_position[0])
            value.append(GDOP)

        #print("GDOP_list = ")
        #print(value)

        min_num_index = map(value.index, heapq.nsmallest(3, value))
        #print("the min three = ")
        #print(list(min_num_index))
        #print(min_num_index)

        self.waypoint_1 = next_position_list[min_num_index[0]]
        self.waypoint_2 = next_position_list[min_num_index[1]]
        self.waypoint_3 = next_position_list[min_num_index[2]]
        print("waypoint = ")
        print(self.waypoint_1, self.waypoint_2, self.waypoint_3)

        self.heading_1 = np.arctan2(-20-self.waypoint_1[1], 50-self.waypoint_1[0])
        self.heading_2 = np.arctan2(-20-self.waypoint_2[1], 50-self.waypoint_2[0])
        self.heading_3 = np.arctan2(-20-self.waypoint_3[1], 50-self.waypoint_3[0])
        print("heading = ")
        print(self.heading_1, self.heading_2, self.heading_3)

        ###################### waypoint control ######################
        if  len(azimuth)>=10:
            Est_Target_x, Est_Target_y, Est_Target_z = LeastQ.LeastQ(ob_point,azimuth)

            land_pos = [Est_Target_x, Est_Target_y, 10]
            print("Est_Target(NED) = ")
            print(Est_Target_x, Est_Target_y, Est_Target_z)

            offb_land.land_waypoint(land_pos)
        
        else:

            offb_pos.next_waypoint(self.waypoint_1, self.waypoint_2, self.waypoint_3, self.heading_1, self.heading_2, self.heading_3)
                

        #est_position.append(self.est_position)
        #lamda.append(self.lamda)

               
        # print("est_target_position_world(ENU) =")
        # print(est_position[0][1],est_position[0][0], -est_position[0][2])
        # print("heading_cmd = ")
        # print(self.heading)

        # Est_Target_x, Est_Target_y, Est_Target_z = LeastQ.LeastQ(ob_point,azimuth)
        # land_pos = [Est_Target_x, Est_Target_y]
        # print("Est_Target(NED) = ")
        # print(Est_Target_x, Est_Target_y, Est_Target_z)
        # print("Est_Target(ENU) = ")
        # print(Est_Target_y, Est_Target_x, -Est_Target_z)

        #offb_land.land_waypoint(land_pos)

                  
    def euler_from_quaternion(self, x, y, z, w):
        """
        Convert a quaternion into euler angles (roll, pitch, yaw)
        roll is rotation around x in radians (counterclockwise)
        pitch is rotation around y in radians (counterclockwise)
        yaw is rotation around z in radians (counterclockwise)
        """
        t0 = +2.0 * (w * x + y * z)
        t1 = +1.0 - 2.0 * (x * x + y * y)
        roll_x = atan2(t0, t1)
     
        t2 = +2.0 * (w * y - z * x)
        t2 = +1.0 if t2 > +1.0 else t2
        t2 = -1.0 if t2 < -1.0 else t2
        pitch_y = asin(t2)
     
        t3 = +2.0 * (w * z + x * y)
        t4 = +1.0 - 2.0 * (y * y + z * z)
        yaw_z = atan2(t3, t4)
     
        return roll_x, pitch_y, yaw_z # in radians

 

    def iteration(self, event):
        #global next_pos
        # print('hey')
        #self.setpoint.header.stamp = rospy.Time.now()
        #print('\n')
        #print(datetime.utcfromtimestamp(rospy.Time.now().to_sec()))
        #rint("ENU coordinate :")
        #print(self.gps_pose) 
        #print("NED coordinate :")
        #print(self.ned_pose) 
        #print("uav_pose :")
        #print(self.roll*57.3, self.pitch*57.3, self.yaw*57.3)


        #self.setpoint.position.x = self.next_pos[0]
        #self.setpoint.position.y = self.next_pos[1]
        #self.setpoint.position.z = 10
        #self.setpoint.yaw = self.heading

        #self.setpoint.header.stamp = rospy.Time.now()
        #self.setpoint_pub.publish(self.setpoint)
	#rospy.loginfo(self.setpoint)
	#time.sleep(0.5)
        
        enu_pos.append([self.gps_pose[0], self.gps_pose[1], self.gps_pose[2]])
        pos_command.append([self.next_pos[0], self.next_pos[1], 10])


if __name__ == '__main__':
    rospy.init_node('aoa_info_drone', anonymous=True)

    dt = 1.0/10
    pathplan_run = aoa_info()
    rospy.Timer(rospy.Duration(dt), pathplan_run.iteration)
    rospy.spin()
    

    #df = DataFrame({'enu_pos': enu_pos})
    #df.to_excel('data_0919_1a.xlsx', sheet_name='sheet1', index=False)
    #dd = DataFrame({'azimuth':azimuth,'ob_point': ob_point})
    #dd.to_excel('data_0919_1b.xlsx', sheet_name='sheet1', index=False)
