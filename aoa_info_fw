#!/usr/bin/env python

import math
import numpy as np
import rospy
from pandas import DataFrame
# from mavros_msgs.msg import State
from sensor_msgs.msg import Imu, NavSatFix
from geometry_msgs.msg import PoseWithCovarianceStamped
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Odometry
from darknet_ros_msgs.msg import BoundingBoxes
from mavros_msgs.msg import PositionTarget
from mavros_msgs.srv import SetMode
from mavros_msgs.srv import ParamSet
from math import *
from datetime import datetime
import time
import heapq

from AOA_v2 import AOA
from dop_fw import path_planning
from offb_fpos import offb_fpos


AOA = AOA()
cal_dop = path_planning()
offb_fpos = offb_fpos()

enu_pos = []
azimuth = []
ob_point = []
est_position = []    


class aoa_info(object):
    def __init__(self):
        self.imu_msg = Imu()
        self.gps_msg = Odometry()
        self.roi_msg = BoundingBoxes()

        self.gps_pose = [0,0,0]
        self.ned_pose = [0,0,0]
        self.roi_four = [0, 0, 0, 0]
        self.imu_x = 0
        self.lamda = 0
        self.roll, self.pitch, self.yaw = 0,0,0
        self.vision_roll, self.vision_pitch, self.vision_yaw = 0, 0, 0
        self.quat = [0,0,0,0]
        self.u, self.v = 0, 0
        self.P_img_x, self.P_img_y, self.P_img_z = 0, 0, 0
        self.angle_a_w = 0
        self.angle_e_w = 0
        self.angle_a = [0, 0]
        self.angle_e = [0, 0]
        self.est_position = [0, 0, 0]
        self.est_x, self.est_y, self.est_z = 0, 0, 0
        self.position_min = [0, 0, 0]
        self.next_pos = [0, 0, 0]
        self.ob_point = [0, 0, 0]
        #self.Target_position_world_x, self.Target_position_world_y, self.Target_position_world_z = 0, 0, 0
        self.Target_position_vector_x, self.Target_position_vector_y, self.Target_position_vector_z = 0, 0, 0
        self.waypoint_1, self.waypoint_2, self.waypoint_3 = 0, 0, 0

        rospy.Subscriber("/plane_cam_0/mavros/imu/data", Imu, self.imu_callback)
        #drone position
        rospy.Subscriber("/plane_cam_0/mavros/global_position/local", Odometry, self.gps_callback)    
        #target position (image)
        rospy.Subscriber("/darknet_ros/bounding_boxes", BoundingBoxes, self.roi_callback)

        self.setpoint = PositionTarget()
        self.setpoint_pub = rospy.Publisher("/plane_cam_0/mavros/setpoint_raw/local", PositionTarget, queue_size=10)


    def gps_callback(self, msg):
        self.gps_msg = msg
        self.gps_pose[0] = msg.pose.pose.position.x
        self.gps_pose[1] = msg.pose.pose.position.y
        self.gps_pose[2] = msg.pose.pose.position.z

        self.ned_pose[0], self.ned_pose[1], self.ned_pose[2] = self.ENU_to_NED(self.gps_pose[0], self.gps_pose[1], self.gps_pose[2])
        
        enu_pos.append([self.gps_pose[0], self.gps_pose[1], self.gps_pose[2]])

    def imu_callback(self, msg):
        self.imu_msg = msg
        self.quat[0] = msg.orientation.w
        self.quat[1] = msg.orientation.x
        self.quat[2] = msg.orientation.y
        self.quat[3] = msg.orientation.z


        self.roll, self.pitch, self.yaw = self.euler_from_quaternion(msg.orientation.x, msg.orientation.y, msg.orientation.z, msg.orientation.w)
        self.vision_roll, self.vision_pitch, self.vision_yaw = self.vision_to_world(self.roll, self.pitch, self.yaw)

    def ENU_to_NED(self, x, y, z):
  
        R = [[0, 1, 0],[1, 0, 0],[0, 0, -1]]
        q = [x, y, z]
        ned = np.matmul(R,q)
        a = ned[0]
        b = ned[1]
        c = ned[2]
      
        return a, b, c

    def NED_to_ENU(self, x, y, z):
  
        R = [[0, 1, 0],[1, 0, 0],[0, 0, -1]]
        q = [x, y, z]
        ned = np.matmul(R,q)
        a = ned[0]
        b = ned[1]
        c = ned[2]
      
        return a, b, c

    def roi_callback(self, msg):
        
        self.roi_msg = msg

        for box in msg.bounding_boxes:

            #print("----------Detection-----------")
            #print("------------------------------")

            #rospy.loginfo(
            #    "Xmin: {}, Xmax: {} Ymin: {}, Ymax: {}".format(box.xmin, box.xmax, box.ymin, box.ymax)
            #     )
            if box.xmin != self.roi_four[0] and box.xmax!= self.roi_four[1] and box.ymin!= self.roi_four[2] and box.ymax!= self.roi_four[3]:
        
                self.roi_four[0] = box.xmin
                self.roi_four[1] = box.xmax
                self.roi_four[2] = box.ymin
                self.roi_four[3] = box.ymax

                #print("BoundingBoxes = ")
                #print(self.roi_four)

                self.u = (self.roi_four[0] + self.roi_four[1])/2
                self.v = (self.roi_four[2] + self.roi_four[3])/2

                #position_vector
                size_u = 320
                size_v = 240
                u_0 = size_u/2
                v_0 = size_v/2
                # focal length
                f = 277.191356
                self.P_img_x = v_0 - self.v
                self.P_img_y = self.u - u_0
                self.P_img_z = f

                print("P_img = ")
                print(self.P_img_x, self.P_img_y, self.P_img_z)

                self.ob_point[0] = self.ned_pose[0]
                self.ob_point[1] = self.ned_pose[1]
                self.ob_point[2] = self.ned_pose[2]
                ########### AoA ###########
                self.angle_a_w, self.angle_e_w, self.angle_a, self.angle_e, self.Target_position_world_x, self.Target_position_world_y, self.Target_position_world_z, self.Target_position_vector_x, self.Target_position_vector_y, self.Target_position_vector,self.lamda = AOA.AOA_v1(self.ned_pose[0], self.ned_pose[1], self.ned_pose[2], self.vision_roll, self.vision_pitch, self.vision_yaw, self.P_img_x, self.P_img_y, self.P_img_z)

                #print("---------------AOA----------------")
                #print(self.angle_a_w, self.angle_e_w)
                #print(self.angle_a, self.angle_e)
                #print(self.Target_position_world_x, self.Target_position_world_y, self.Target_position_world_z)
                #print(self.Target_position_vector_x, self.Target_position_vector_y, self.Target_position_vector_z)
                #print("-----------------------------------")
                
                #ned
                est_position.append([self.Target_position_world_x, self.Target_position_world_y, self.Target_position_world_z])

                print("Estimated_Target_position_world(enu) = ")
                #print(est_position)
                print(est_position[0][1], est_position[0][0], est_position[0][2])

                ########### Path planning ###########
                value = []

                next_position_list =  cal_dop.next_position(self.angle_a_w, est_position[0])
                #print("next_position_list : ")
                #print(next_position_list)

                for i in range (30):
                    a = [next_position_list[i][0], next_position_list[i][1], next_position_list[i][2]]
                    #print("next_position = ")
                    #print(a)

                    GDOP = cal_dop.calculate_dop(self.ob_point, a, est_position[0])
                    value.append(GDOP)
                #print("GDOP_list = ")
                #print(value)
                
                # GDOP_1 = value[0]+value[1]+value[2]
                # GDOP_2 = value[3]+value[4]+value[5]
                # GDOP_3 = value[6]+value[7]+value[8]
                # GDOP_4 = value[9]+value[10]+value[11]
                # GDOP_5 = value[12]+value[13]+value[14]

                GDOP_1 = value[0]+value[1]+value[2]+value[3]+value[4]+value[5]
                GDOP_2 = value[6]+value[7]+value[8]+value[9]+value[10]+value[11]
                GDOP_3 = value[12]+value[13]+value[14]+value[15]+value[16]+value[17]
                GDOP_4 = value[18]+value[19]+value[20]+value[21]+value[22]+value[23]
                GDOP_5 = value[24]+value[25]+value[26]+value[27]+value[28]+value[29]

                DOP = [GDOP_1, GDOP_2, GDOP_3, GDOP_4, GDOP_5]
                #DOP = [GDOP_1, GDOP_2]

                #print("DOP = ")
                #print(DOP)

                DOP_min = min(DOP)
                num = DOP.index(DOP_min)
                #print("the min num = ")
                #print(num)

                ############## waypoint control ################
                self.waypoint_1 = next_position_list[3*num]
                self.waypoint_2 = next_position_list[3*num+1]
                self.waypoint_3 = next_position_list[3*num+2]
                self.waypoint_4 = next_position_list[3*num+4]
                self.waypoint_5 = next_position_list[3*num+5]
                self.waypoint_6 = next_position_list[3*num+6]

            else:
                  pass

            print("Next waypoint(ned) = ")
            print(self.waypoint_1, self.waypoint_2, self.waypoint_3, self.waypoint_4, self.waypoint_5, self.waypoint_6)
            
            if np.sqrt(np.square(self.ned_pose[0]-10)+np.square(self.ned_pose[1]-w1[1]))<= 50:


            else:
                print('Go to target circle!')
                offb_fpos.next_waypoint(self.waypoint_1, self.waypoint_2, self.waypoint_3, self.waypoint_4, self.waypoint_5, self.waypoint_6)



            
            
    # def control(self):

    #      global next_position_list, num

    #     ############# waypoint control ################
    #     self.waypoint_1 = next_position_list[3*num]
    #     self.waypoint_2 = next_position_list[3*num+1]
    #     self.waypoint_3 = next_position_list[3*num+2]
    #     print("waypoint = ")
    #     print(self.waypoint_1, self.waypoint_2, self.waypoint_3)

    #     offb_fpos.next_waypoint(self.waypoint_1, self.waypoint_2, self.waypoint_3)
 
    #     #azimuth.append(self.angle_a_w)
    #     #enu_pos.append([self.gps_pose[0], self.gps_pose[1], self.gps_pose[2]])
    #     #ob_point.append([self.ob_point[0], self.ob_point[1], self.ob_point[2]])


    def euler_from_quaternion(self, x, y, z, w):
        """
        Convert a quaternion into euler angles (roll, pitch, yaw)
        roll is rotation around x in radians (counterclockwise)
        pitch is rotation around y in radians (counterclockwise)
        yaw is rotation around z in radians (counterclockwise)
        """
        t0 = +2.0 * (w * x + y * z)
        t1 = +1.0 - 2.0 * (x * x + y * y)
        roll_x = atan2(t0, t1)
     
        t2 = +2.0 * (w * y - z * x)
        t2 = +1.0 if t2 > +1.0 else t2
        t2 = -1.0 if t2 < -1.0 else t2
        pitch_y = asin(t2)
     
        t3 = +2.0 * (w * z + x * y)
        t4 = +1.0 - 2.0 * (y * y + z * z)
        yaw_z = atan2(t3, t4)
     
        return roll_x, pitch_y, yaw_z # in radians


    def vision_to_world(self, roll, pitch, yaw):
  
        R_x = [[1, 0, 0],[0, 1, 0],[0, 0, 1]]
        R_y = [[cos(30), 0, -sin(30)],[0, 1, 0],[sin(30), 0, cos(30)]]
        R_z = [[cos(90), -sin(90), 0],[sin(90), cos(90), 0],[0, 0, 1]]
        R = np.matmul(R_y, R_z)
        #print(R)
        
        A = [roll, pitch, yaw]
        [vision_roll, vision_pitch, vision_yaw] = np.matmul(R,A)

        return vision_roll, vision_pitch, vision_yaw


    def iteration(self, event):
        pass
        #print('hey')
        #self.setpoint.header.stamp = rospy.Time.now()
        #print(datetime.utcfromtimestamp(rospy.Time.now().to_sec()))
        #print("ENU coordinate :")
        #print(self.gps_pose) 
        #print("NED coordinate :")
        #print(self.ned_pose) 
        print("uav_pose :")
        print(self.roll*57.3, self.pitch*57.3, self.yaw*57.3)
        #print("camera_pose :")
        #print(self.vision_roll*57.3, self.vision_pitch*57.3, self.vision_yaw*57.3)

        #print("a_w, e_w, a, e = ")
        #print(self.angle_a_w, self.angle_e_w)
        #print(self.angle_a, self.angle_e)

        ############# waypoint control ################
        #print('Start!')
        #offb_fpos.next_waypoint(self.waypoint_1, self.waypoint_2, self.waypoint_3)
 
        #azimuth.append(self.angle_a_w)
        #enu_pos.append([self.gps_pose[0], self.gps_pose[1], self.gps_pose[2]])
        #ob_point.append([self.ob_point[0], self.ob_point[1], self.ob_point[2]])
        #self.setpoint.position.x = self.next_pos[0]
        #self.setpoint.position.y = self.next_pos[1]
        #self.setpoint.position.z = 50
        
	    #rospy.loginfo(self.setpoint)
        #time.sleep(1)

        #enu_pos.append([self.gps_pose[0], self.gps_pose[1], self.gps_pose[2]])


if __name__ == '__main__':
    rospy.init_node('aoa_info_fixedwing', anonymous=True)
    dt = 1.0/10
    pathplan_run = aoa_info()
    rospy.Timer(rospy.Duration(dt), pathplan_run.iteration)
    rospy.spin()

    df = DataFrame({'enu_pos': enu_pos })
    df.to_excel('data_1025.xlsx', sheet_name='sheet1', index=False)
